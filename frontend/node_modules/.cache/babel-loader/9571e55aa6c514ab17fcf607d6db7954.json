{"ast":null,"code":"import { GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_SUCCESS, GET_SUPPLIERS_FAIL, CREATE_SUPPLIER_REQUEST, CREATE_SUPPLIER_SUCCESS, CREATE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS, DELETE_SUPPLIER_FAIL, UPDATE_SUPPLIER_SUCCESS, UPDATE_SUPPLIER_FAIL, SUPPLIER_DETAILS_REQUEST, SUPPLIER_DETAILS_SUCCESS, SUPPLIER_DETAILS_FAIL, CLEAR_ERRORS } from '../constants/supplierConstants';\nimport axios from 'axios'; // Lấy danh sách nhà cung cấp\n\nexport const fetchSuppliers = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/v1/supplier/${id}`);\n    dispatch({\n      type: SUPPLIER_DETAILS_SUCCESS,\n      payload: data.supplier\n    });\n  } catch (error) {\n    dispatch({\n      type: SUPPLIER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Thêm mới nhà cung cấp\n\nexport const addSupplier = supplierData => async dispatch => {\n  try {\n    dispatch({\n      type: CREATE_SUPPLIER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/suppliers', supplierData, config);\n    dispatch({\n      type: CREATE_SUPPLIER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_SUPPLIER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Cập nhật nhà cung cấp\n\nexport const updateSupplier = (id, supplierData) => async dispatch => {\n  try {\n    // Gọi API để cập nhật nhà cung cấp\n    const {\n      data\n    } = await axios.put(`/api/v1/suppliers/${id}`, supplierData);\n    dispatch({\n      type: UPDATE_SUPPLIER_SUCCESS,\n      payload: data.supplier\n    });\n  } catch (error) {\n    const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: UPDATE_SUPPLIER_FAIL,\n      payload: errorMessage\n    });\n  }\n}; // Xóa nhà cung cấp\n\nexport const removeSupplier = id => async dispatch => {\n  try {\n    // Gọi API để xóa nhà cung cấp\n    await axios.delete(`/api/v1/suppliers/${id}`);\n    dispatch({\n      type: DELETE_SUPPLIER_SUCCESS,\n      payload: id\n    });\n  } catch (error) {\n    const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: DELETE_SUPPLIER_FAIL,\n      payload: errorMessage\n    });\n  }\n};\nexport const fetchSupplierDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: SUPPLIER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/suppliers/${id}`);\n    dispatch({\n      type: SUPPLIER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SUPPLIER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/This PC/OneDrive/Desktop/doan/doan/doan_tiemPizza/frontend/src/actions/supplierActions.js"],"names":["GET_SUPPLIERS_REQUEST","GET_SUPPLIERS_SUCCESS","GET_SUPPLIERS_FAIL","CREATE_SUPPLIER_REQUEST","CREATE_SUPPLIER_SUCCESS","CREATE_SUPPLIER_FAIL","DELETE_SUPPLIER_SUCCESS","DELETE_SUPPLIER_FAIL","UPDATE_SUPPLIER_SUCCESS","UPDATE_SUPPLIER_FAIL","SUPPLIER_DETAILS_REQUEST","SUPPLIER_DETAILS_SUCCESS","SUPPLIER_DETAILS_FAIL","CLEAR_ERRORS","axios","fetchSuppliers","id","dispatch","data","get","type","payload","supplier","error","response","message","addSupplier","supplierData","config","headers","post","updateSupplier","put","errorMessage","removeSupplier","delete","fetchSupplierDetails","clearErrors"],"mappings":"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","sourcesContent":["import {\r\n    GET_SUPPLIERS_REQUEST,\r\n    GET_SUPPLIERS_SUCCESS,\r\n    GET_SUPPLIERS_FAIL,\r\n    CREATE_SUPPLIER_REQUEST,\r\n    CREATE_SUPPLIER_SUCCESS,\r\n    CREATE_SUPPLIER_FAIL,\r\n    DELETE_SUPPLIER_SUCCESS,\r\n    DELETE_SUPPLIER_FAIL,\r\n    UPDATE_SUPPLIER_SUCCESS,\r\n    UPDATE_SUPPLIER_FAIL,\r\n    SUPPLIER_DETAILS_REQUEST,\r\n    SUPPLIER_DETAILS_SUCCESS,\r\n    SUPPLIER_DETAILS_FAIL,\r\n    CLEAR_ERRORS\r\n} from '../constants/supplierConstants';\r\nimport axios from 'axios';\r\n\r\n// Lấy danh sách nhà cung cấp\r\nexport const fetchSuppliers = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await axios.get(`/api/v1/supplier/${id}`);\r\n\r\n        dispatch({\r\n            type: SUPPLIER_DETAILS_SUCCESS,\r\n            payload: data.supplier,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SUPPLIER_DETAILS_FAIL,\r\n            payload: error.response.data.message,\r\n        });\r\n    }\r\n};\r\n\r\n// Thêm mới nhà cung cấp\r\nexport const addSupplier = (supplierData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_SUPPLIER_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post('/api/suppliers', supplierData, config);\r\n\r\n        dispatch({\r\n            type: CREATE_SUPPLIER_SUCCESS,\r\n            payload: data,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: CREATE_SUPPLIER_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message,\r\n        });\r\n    }\r\n};\r\n\r\n// Cập nhật nhà cung cấp\r\nexport const updateSupplier = (id, supplierData) => async (dispatch) => {\r\n    try {\r\n        // Gọi API để cập nhật nhà cung cấp\r\n        const { data } = await axios.put(`/api/v1/suppliers/${id}`, supplierData);\r\n\r\n        dispatch({\r\n            type: UPDATE_SUPPLIER_SUCCESS,\r\n            payload: data.supplier,\r\n        });\r\n    } catch (error) {\r\n        const errorMessage = error.response && error.response.data.message \r\n            ? error.response.data.message \r\n            : error.message;\r\n        dispatch({\r\n            type: UPDATE_SUPPLIER_FAIL,\r\n            payload: errorMessage,\r\n        });\r\n    }\r\n};\r\n\r\n// Xóa nhà cung cấp\r\nexport const removeSupplier = (id) => async (dispatch) => {\r\n    try {\r\n        // Gọi API để xóa nhà cung cấp\r\n        await axios.delete(`/api/v1/suppliers/${id}`);\r\n\r\n        dispatch({\r\n            type: DELETE_SUPPLIER_SUCCESS,\r\n            payload: id,\r\n        });\r\n    } catch (error) {\r\n        const errorMessage = error.response && error.response.data.message \r\n            ? error.response.data.message \r\n            : error.message;\r\n        dispatch({\r\n            type: DELETE_SUPPLIER_FAIL,\r\n            payload: errorMessage,\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchSupplierDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: SUPPLIER_DETAILS_REQUEST });\r\n\r\n        const { data } = await axios.get(`/api/suppliers/${id}`);\r\n\r\n        dispatch({\r\n            type: SUPPLIER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SUPPLIER_DETAILS_FAIL,\r\n            payload: error.response.data.message,\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const clearErrors = () => (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}