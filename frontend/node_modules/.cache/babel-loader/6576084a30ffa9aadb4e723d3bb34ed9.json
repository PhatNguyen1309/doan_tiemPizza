{"ast":null,"code":"import { GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_SUCCESS, GET_SUPPLIERS_FAIL, CREATE_SUPPLIER_REQUEST, CREATE_SUPPLIER_SUCCESS, CREATE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS, DELETE_SUPPLIER_FAIL, UPDATE_SUPPLIER_SUCCESS, UPDATE_SUPPLIER_FAIL, UPDATE_SUPPLIER_REQUEST, CLEAR_ERRORS } from '../constants/supplierConstants';\nimport axios from 'axios'; // Lấy danh sách nhà cung cấp\n\nexport const fetchSuppliers = () => async dispatch => {\n  try {\n    dispatch({\n      type: GET_SUPPLIERS_REQUEST\n    }); // Gọi API trực tiếp để lấy danh sách nhà cung cấp\n\n    const {\n      data\n    } = await axios.get('/api/v1/suppliers');\n    dispatch({\n      type: GET_SUPPLIERS_SUCCESS,\n      payload: data.suppliers\n    });\n  } catch (error) {\n    const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: GET_SUPPLIERS_FAIL,\n      payload: errorMessage\n    });\n  }\n}; // Thêm mới nhà cung cấp\n\nexport const addSupplier = supplierData => async dispatch => {\n  try {\n    dispatch({\n      type: CREATE_SUPPLIER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/suppliers', supplierData, config);\n    dispatch({\n      type: CREATE_SUPPLIER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_SUPPLIER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Cập nhật nhà cung cấp\n\nexport const updateSupplierDetail = (id, supplierData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_SUPPLIER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/supplier/${id}`, supplierData, config);\n    dispatch({\n      type: UPDATE_SUPPLIER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: UPDATE_SUPPLIER_FAIL,\n      payload: errorMessage\n    });\n  }\n}; // Xóa nhà cung cấp\n\nexport const removeSupplier = id => async dispatch => {\n  try {\n    // Gọi API để xóa nhà cung cấp\n    await axios.delete(`/api/v1/suppliers/${id}`);\n    dispatch({\n      type: DELETE_SUPPLIER_SUCCESS,\n      payload: id\n    });\n  } catch (error) {\n    const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: DELETE_SUPPLIER_FAIL,\n      payload: errorMessage\n    });\n  }\n};\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/This PC/OneDrive/Desktop/doan/doan/doan_tiemPizza/frontend/src/actions/supplierActions.js"],"names":["GET_SUPPLIERS_REQUEST","GET_SUPPLIERS_SUCCESS","GET_SUPPLIERS_FAIL","CREATE_SUPPLIER_REQUEST","CREATE_SUPPLIER_SUCCESS","CREATE_SUPPLIER_FAIL","DELETE_SUPPLIER_SUCCESS","DELETE_SUPPLIER_FAIL","UPDATE_SUPPLIER_SUCCESS","UPDATE_SUPPLIER_FAIL","UPDATE_SUPPLIER_REQUEST","CLEAR_ERRORS","axios","fetchSuppliers","dispatch","type","data","get","payload","suppliers","error","errorMessage","response","message","addSupplier","supplierData","config","headers","post","updateSupplierDetail","id","put","success","removeSupplier","delete","clearErrors"],"mappings":"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","sourcesContent":["import {\r\n    GET_SUPPLIERS_REQUEST,\r\n    GET_SUPPLIERS_SUCCESS,\r\n    GET_SUPPLIERS_FAIL,\r\n    CREATE_SUPPLIER_REQUEST,\r\n    CREATE_SUPPLIER_SUCCESS,\r\n    CREATE_SUPPLIER_FAIL,\r\n    DELETE_SUPPLIER_SUCCESS,\r\n    DELETE_SUPPLIER_FAIL,\r\n    UPDATE_SUPPLIER_SUCCESS,\r\n    UPDATE_SUPPLIER_FAIL,\r\n    UPDATE_SUPPLIER_REQUEST,\r\n    CLEAR_ERRORS\r\n} from '../constants/supplierConstants';\r\nimport axios from 'axios';\r\n\r\n// Lấy danh sách nhà cung cấp\r\nexport const fetchSuppliers = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_SUPPLIERS_REQUEST });\r\n\r\n        // Gọi API trực tiếp để lấy danh sách nhà cung cấp\r\n        const { data } = await axios.get('/api/v1/suppliers');\r\n        \r\n        dispatch({\r\n            type: GET_SUPPLIERS_SUCCESS,\r\n            payload: data.suppliers,\r\n        });\r\n    } catch (error) {\r\n        const errorMessage = error.response && error.response.data.message \r\n            ? error.response.data.message \r\n            : error.message;\r\n        dispatch({\r\n            type: GET_SUPPLIERS_FAIL,\r\n            payload: errorMessage,\r\n        });\r\n    }\r\n};\r\n\r\n// Thêm mới nhà cung cấp\r\nexport const addSupplier = (supplierData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_SUPPLIER_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post('/api/suppliers', supplierData, config);\r\n\r\n        dispatch({\r\n            type: CREATE_SUPPLIER_SUCCESS,\r\n            payload: data,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: CREATE_SUPPLIER_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message,\r\n        });\r\n    }\r\n};\r\n\r\n// Cập nhật nhà cung cấp\r\nexport const updateSupplierDetail = (id, supplierData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_SUPPLIER_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.put(`/api/v1/supplier/${id}`, supplierData, config);\r\n\r\n        dispatch({\r\n            type: UPDATE_SUPPLIER_SUCCESS,\r\n            payload: data.success,\r\n        });\r\n    } catch (error) {\r\n        const errorMessage = error.response && error.response.data.message \r\n            ? error.response.data.message \r\n            : error.message;\r\n\r\n        dispatch({\r\n            type: UPDATE_SUPPLIER_FAIL,\r\n            payload: errorMessage,\r\n        });\r\n    }\r\n};\r\n\r\n// Xóa nhà cung cấp\r\nexport const removeSupplier = (id) => async (dispatch) => {\r\n    try {\r\n        // Gọi API để xóa nhà cung cấp\r\n        await axios.delete(`/api/v1/suppliers/${id}`);\r\n\r\n        dispatch({\r\n            type: DELETE_SUPPLIER_SUCCESS,\r\n            payload: id,\r\n        });\r\n    } catch (error) {\r\n        const errorMessage = error.response && error.response.data.message \r\n            ? error.response.data.message \r\n            : error.message;\r\n        dispatch({\r\n            type: DELETE_SUPPLIER_FAIL,\r\n            payload: errorMessage,\r\n        });\r\n    }\r\n};\r\n\r\nexport const clearErrors = () => (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}