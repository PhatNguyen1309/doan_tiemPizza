{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL, NEW_PASSWORD_REQUEST, NEW_PASSWORD_SUCCESS, NEW_PASSWORD_FAIL, ALL_USERS_REQUEST, ALL_USERS_SUCCESS, ALL_USERS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, CREATE_USER_REQUEST, CREATE_USER_SUCCESS, CREATE_USER_FAIL, CLEAR_ERRORS } from '../constants/userConstants'; // Login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Gửi yêu cầu POST đến API\n\n    const {\n      data\n    } = await axios.post('/api/v1/login', {\n      email,\n      password\n    }, config); // Nếu thành công, dispatch action LOGIN_SUCCESS\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user // Đảm bảo rằng dữ liệu user là hợp lệ\n\n    });\n  } catch (error) {\n    // Kiểm tra nếu không có error.response (trường hợp không nhận được phản hồi từ server)\n    const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message; // fallback nếu không có error.response\n    // Dispatch action LOGIN_FAIL với thông báo lỗi\n\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: errorMessage // Trả về thông báo lỗi chi tiết\n\n    });\n  }\n}; // Register user\n\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/register', userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Load user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update profile\n\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/me/update', userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update password\n\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/password/update', passwords, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Forgot password\n\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/password/forgot', email, config);\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Reset password\n\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\n    dispatch({\n      type: NEW_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Logout user\n\nexport const logout = () => async dispatch => {\n  try {\n    await axios.get('/api/v1/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get all users\n\nexport const allUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/admin/users');\n    dispatch({\n      type: ALL_USERS_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_USERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update user - ADMIN\n\nexport const updateUser = (id, userData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Kiểm tra và thêm cccd, bankAccount nếu vai trò là staff\n\n    if (userData.role === 'staff') {\n      if (userData.cccd) {\n        userData.cccd = userData.cccd; // Gửi cccd\n      }\n\n      if (userData.bankAccount) {\n        userData.bankAccount = userData.bankAccount; // Gửi bankAccount\n      }\n    } // Gửi yêu cầu PUT với các dữ liệu đã cập nhật\n\n\n    const {\n      data\n    } = await axios.put(`/api/v1/admin/user/${id}`, userData, config);\n    dispatch({\n      type: UPDATE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get user details - ADMIN\n\nexport const getUserDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/user/${id}`);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Create user - ADMIN\n\nexport const createUser = userData => async dispatch => {\n  try {\n    dispatch({\n      type: 'USER_CREATE_REQUEST'\n    }); // Gửi yêu cầu đến API\n\n    const {\n      data\n    } = await axios.post('/api/v1/admin/user/new', userData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    dispatch({\n      type: 'USER_CREATE_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'USER_CREATE_FAIL',\n      payload: error.response ? error.response.data.message : error.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/This PC/OneDrive/Desktop/doan/doan/doan_tiemPizza/frontend/src/actions/userActions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAIL","NEW_PASSWORD_REQUEST","NEW_PASSWORD_SUCCESS","NEW_PASSWORD_FAIL","ALL_USERS_REQUEST","ALL_USERS_SUCCESS","ALL_USERS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","CREATE_USER_REQUEST","CREATE_USER_SUCCESS","CREATE_USER_FAIL","CLEAR_ERRORS","login","email","password","dispatch","type","config","headers","data","post","payload","user","error","errorMessage","response","message","register","userData","loadUser","get","updateProfile","put","success","updatePassword","passwords","forgotPassword","resetPassword","token","logout","allUsers","users","updateUser","id","role","cccd","bankAccount","getUserDetails","createUser","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_USER_REQUEST,\n    REGISTER_USER_SUCCESS,\n    REGISTER_USER_FAIL,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAIL,\n    UPDATE_PROFILE_REQUEST,\n    UPDATE_PROFILE_SUCCESS,\n    UPDATE_PROFILE_FAIL,\n    UPDATE_PASSWORD_REQUEST,\n    UPDATE_PASSWORD_SUCCESS,\n    UPDATE_PASSWORD_FAIL,\n    FORGOT_PASSWORD_REQUEST,\n    FORGOT_PASSWORD_SUCCESS,\n    FORGOT_PASSWORD_FAIL,\n    NEW_PASSWORD_REQUEST,\n    NEW_PASSWORD_SUCCESS,\n    NEW_PASSWORD_FAIL,\n    ALL_USERS_REQUEST,\n    ALL_USERS_SUCCESS,\n    ALL_USERS_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    UPDATE_USER_REQUEST,\n    UPDATE_USER_SUCCESS,\n    UPDATE_USER_FAIL,\n    LOGOUT_SUCCESS,\n    LOGOUT_FAIL,\n    CREATE_USER_REQUEST,\n    CREATE_USER_SUCCESS,\n    CREATE_USER_FAIL,\n    CLEAR_ERRORS\n} from '../constants/userConstants'\n\n// Login\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({ type: LOGIN_REQUEST });\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n\n        // Gửi yêu cầu POST đến API\n        const { data } = await axios.post('/api/v1/login', { email, password }, config);\n\n        // Nếu thành công, dispatch action LOGIN_SUCCESS\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: data.user, // Đảm bảo rằng dữ liệu user là hợp lệ\n        });\n    } catch (error) {\n        // Kiểm tra nếu không có error.response (trường hợp không nhận được phản hồi từ server)\n        const errorMessage = error.response && error.response.data.message \n            ? error.response.data.message \n            : error.message; // fallback nếu không có error.response\n\n        // Dispatch action LOGIN_FAIL với thông báo lỗi\n        dispatch({\n            type: LOGIN_FAIL,\n            payload: errorMessage, // Trả về thông báo lỗi chi tiết\n        });\n    }\n};\n\n\n// Register user\nexport const register = (userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: REGISTER_USER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/register', userData, config)\n\n        dispatch({\n            type: REGISTER_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: REGISTER_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: LOAD_USER_REQUEST })\n\n        const { data } = await axios.get('/api/v1/me')\n\n        dispatch({\n            type: LOAD_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOAD_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update profile\nexport const updateProfile = (userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PROFILE_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n\n        const { data } = await axios.put('/api/v1/me/update', userData, config)\n\n        dispatch({\n            type: UPDATE_PROFILE_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PROFILE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update password\nexport const updatePassword = (passwords) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PASSWORD_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put('/api/v1/password/update', passwords, config)\n\n        dispatch({\n            type: UPDATE_PASSWORD_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Forgot password\nexport const forgotPassword = (email) => async (dispatch) => {\n    try {\n\n        dispatch({ type: FORGOT_PASSWORD_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/password/forgot', email, config)\n\n        dispatch({\n            type: FORGOT_PASSWORD_SUCCESS,\n            payload: data.message\n        })\n\n    } catch (error) {\n        dispatch({\n            type: FORGOT_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Reset password\nexport const resetPassword = (token, passwords) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_PASSWORD_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config)\n\n        dispatch({\n            type: NEW_PASSWORD_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: NEW_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Logout user\nexport const logout = () => async (dispatch) => {\n    try {\n\n        await axios.get('/api/v1/logout')\n\n        dispatch({\n            type: LOGOUT_SUCCESS,\n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOGOUT_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get all users\nexport const allUsers = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_USERS_REQUEST })\n\n        const { data } = await axios.get('/api/v1/admin/users')\n\n        dispatch({\n            type: ALL_USERS_SUCCESS,\n            payload: data.users\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_USERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update user - ADMIN\nexport const updateUser = (id, userData) => async (dispatch) => {\n    try {\n        dispatch({ type: UPDATE_USER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        // Kiểm tra và thêm cccd, bankAccount nếu vai trò là staff\n        if (userData.role === 'staff') {\n            if (userData.cccd) {\n                userData.cccd = userData.cccd;  // Gửi cccd\n            }\n            if (userData.bankAccount) {\n                userData.bankAccount = userData.bankAccount;  // Gửi bankAccount\n            }\n        }\n\n        // Gửi yêu cầu PUT với các dữ liệu đã cập nhật\n        const { data } = await axios.put(`/api/v1/admin/user/${id}`, userData, config)\n\n        dispatch({\n            type: UPDATE_USER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n// Get user details - ADMIN\nexport const getUserDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: USER_DETAILS_REQUEST })\n\n\n        const { data } = await axios.get(`/api/v1/admin/user/${id}`)\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Create user - ADMIN\nexport const createUser = (userData) => async (dispatch) => {\n    try {\n        dispatch({ type: 'USER_CREATE_REQUEST' });\n\n        // Gửi yêu cầu đến API\n        const { data } = await axios.post('/api/v1/admin/user/new', userData, {\n            headers: { 'Content-Type': 'multipart/form-data' },\n        });\n\n        dispatch({\n            type: 'USER_CREATE_SUCCESS',\n            payload: data,\n        });\n    } catch (error) {\n        dispatch({\n            type: 'USER_CREATE_FAIL',\n            payload: error.response ? error.response.data.message : error.message,\n        });\n    }\n};\n\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n}"]},"metadata":{},"sourceType":"module"}