{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL, NEW_PASSWORD_REQUEST, NEW_PASSWORD_SUCCESS, NEW_PASSWORD_FAIL, ALL_USERS_REQUEST, ALL_USERS_SUCCESS, ALL_USERS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, USER_CREATE_REQUEST, USER_CREATE_SUCCESS, USER_CREATE_FAIL, CLEAR_ERRORS } from '../constants/userConstants'; // Helper để lấy thông báo lỗi\n\nconst getErrorMessage = error => {\n  return error.response && error.response.data.message ? error.response.data.message : error.message;\n}; // Login\n\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Register user\n\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/register', userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Load user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Update profile\n\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/me/update', userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Update password\n\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/password/update', passwords, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Forgot password\n\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/password/forgot', email, config);\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Reset password\n\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\n    dispatch({\n      type: NEW_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_PASSWORD_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Logout user\n\nexport const logout = () => async dispatch => {\n  try {\n    await axios.get('/api/v1/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Get all users\n\nexport const allUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/admin/users');\n    dispatch({\n      type: ALL_USERS_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_USERS_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Update user - ADMIN\n\nexport const updateUser = (id, userData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/admin/user/${id}`, userData, config);\n    dispatch({\n      type: UPDATE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Get user details - ADMIN\n\nexport const getUserDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/user/${id}`);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Create user - ADMIN\n\nexport const createUser = formData => async dispatch => {\n  try {\n    dispatch({\n      type: USER_CREATE_REQUEST\n    });\n    const {\n      data\n    } = await axios.post('/api/v1/admin/user/new', formData);\n    dispatch({\n      type: USER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_CREATE_FAIL,\n      payload: getErrorMessage(error)\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/This PC/OneDrive/Desktop/doan/doan/doan_tiemPizza/frontend/src/actions/userActions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAIL","NEW_PASSWORD_REQUEST","NEW_PASSWORD_SUCCESS","NEW_PASSWORD_FAIL","ALL_USERS_REQUEST","ALL_USERS_SUCCESS","ALL_USERS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","USER_CREATE_REQUEST","USER_CREATE_SUCCESS","USER_CREATE_FAIL","CLEAR_ERRORS","getErrorMessage","error","response","data","message","login","email","password","dispatch","type","config","headers","post","payload","user","register","userData","loadUser","get","updateProfile","put","success","updatePassword","passwords","forgotPassword","resetPassword","token","logout","allUsers","users","updateUser","id","getUserDetails","createUser","formData","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_USER_REQUEST,\n    REGISTER_USER_SUCCESS,\n    REGISTER_USER_FAIL,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAIL,\n    UPDATE_PROFILE_REQUEST,\n    UPDATE_PROFILE_SUCCESS,\n    UPDATE_PROFILE_FAIL,\n    UPDATE_PASSWORD_REQUEST,\n    UPDATE_PASSWORD_SUCCESS,\n    UPDATE_PASSWORD_FAIL,\n    FORGOT_PASSWORD_REQUEST,\n    FORGOT_PASSWORD_SUCCESS,\n    FORGOT_PASSWORD_FAIL,\n    NEW_PASSWORD_REQUEST,\n    NEW_PASSWORD_SUCCESS,\n    NEW_PASSWORD_FAIL,\n    ALL_USERS_REQUEST,\n    ALL_USERS_SUCCESS,\n    ALL_USERS_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    UPDATE_USER_REQUEST,\n    UPDATE_USER_SUCCESS,\n    UPDATE_USER_FAIL,\n    LOGOUT_SUCCESS,\n    LOGOUT_FAIL,\n    USER_CREATE_REQUEST,\n    USER_CREATE_SUCCESS,\n    USER_CREATE_FAIL,\n    CLEAR_ERRORS,\n} from '../constants/userConstants';\n\n// Helper để lấy thông báo lỗi\nconst getErrorMessage = (error) => {\n    return error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n};\n\n// Login\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({ type: LOGIN_REQUEST });\n\n        const config = { headers: { 'Content-Type': 'application/json' } };\n        const { data } = await axios.post('/api/v1/login', { email, password }, config);\n\n        dispatch({ type: LOGIN_SUCCESS, payload: data.user });\n    } catch (error) {\n        dispatch({ type: LOGIN_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Register user\nexport const register = (userData) => async (dispatch) => {\n    try {\n        dispatch({ type: REGISTER_USER_REQUEST });\n\n        const config = { headers: { 'Content-Type': 'multipart/form-data' } };\n        const { data } = await axios.post('/api/v1/register', userData, config);\n\n        dispatch({ type: REGISTER_USER_SUCCESS, payload: data.user });\n    } catch (error) {\n        dispatch({ type: REGISTER_USER_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n    try {\n        dispatch({ type: LOAD_USER_REQUEST });\n\n        const { data } = await axios.get('/api/v1/me');\n        dispatch({ type: LOAD_USER_SUCCESS, payload: data.user });\n    } catch (error) {\n        dispatch({ type: LOAD_USER_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Update profile\nexport const updateProfile = (userData) => async (dispatch) => {\n    try {\n        dispatch({ type: UPDATE_PROFILE_REQUEST });\n\n        const config = { headers: { 'Content-Type': 'multipart/form-data' } };\n        const { data } = await axios.put('/api/v1/me/update', userData, config);\n\n        dispatch({ type: UPDATE_PROFILE_SUCCESS, payload: data.success });\n    } catch (error) {\n        dispatch({ type: UPDATE_PROFILE_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Update password\nexport const updatePassword = (passwords) => async (dispatch) => {\n    try {\n        dispatch({ type: UPDATE_PASSWORD_REQUEST });\n\n        const config = { headers: { 'Content-Type': 'application/json' } };\n        const { data } = await axios.put('/api/v1/password/update', passwords, config);\n\n        dispatch({ type: UPDATE_PASSWORD_SUCCESS, payload: data.success });\n    } catch (error) {\n        dispatch({ type: UPDATE_PASSWORD_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Forgot password\nexport const forgotPassword = (email) => async (dispatch) => {\n    try {\n        dispatch({ type: FORGOT_PASSWORD_REQUEST });\n\n        const config = { headers: { 'Content-Type': 'application/json' } };\n        const { data } = await axios.post('/api/v1/password/forgot', email, config);\n\n        dispatch({ type: FORGOT_PASSWORD_SUCCESS, payload: data.message });\n    } catch (error) {\n        dispatch({ type: FORGOT_PASSWORD_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Reset password\nexport const resetPassword = (token, passwords) => async (dispatch) => {\n    try {\n        dispatch({ type: NEW_PASSWORD_REQUEST });\n\n        const config = { headers: { 'Content-Type': 'application/json' } };\n        const { data } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\n\n        dispatch({ type: NEW_PASSWORD_SUCCESS, payload: data.success });\n    } catch (error) {\n        dispatch({ type: NEW_PASSWORD_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Logout user\nexport const logout = () => async (dispatch) => {\n    try {\n        await axios.get('/api/v1/logout');\n        dispatch({ type: LOGOUT_SUCCESS });\n    } catch (error) {\n        dispatch({ type: LOGOUT_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Get all users\nexport const allUsers = () => async (dispatch) => {\n    try {\n        dispatch({ type: ALL_USERS_REQUEST });\n\n        const { data } = await axios.get('/api/v1/admin/users');\n        dispatch({ type: ALL_USERS_SUCCESS, payload: data.users });\n    } catch (error) {\n        dispatch({ type: ALL_USERS_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Update user - ADMIN\nexport const updateUser = (id, userData) => async (dispatch) => {\n    try {\n        dispatch({ type: UPDATE_USER_REQUEST });\n\n        const config = { headers: { 'Content-Type': 'application/json' } };\n\n        const { data } = await axios.put(`/api/v1/admin/user/${id}`, userData, config);\n        dispatch({ type: UPDATE_USER_SUCCESS, payload: data.success });\n    } catch (error) {\n        dispatch({ type: UPDATE_USER_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Get user details - ADMIN\nexport const getUserDetails = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: USER_DETAILS_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/admin/user/${id}`);\n        dispatch({ type: USER_DETAILS_SUCCESS, payload: data.user });\n    } catch (error) {\n        dispatch({ type: USER_DETAILS_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Create user - ADMIN\nexport const createUser = (formData) => async (dispatch) => {\n    try {\n        dispatch({ type: USER_CREATE_REQUEST });\n\n        const { data } = await axios.post('/api/v1/admin/user/new', formData);\n        dispatch({ type: USER_CREATE_SUCCESS, payload: data });\n    } catch (error) {\n        dispatch({ type: USER_CREATE_FAIL, payload: getErrorMessage(error) });\n    }\n};\n\n// Clear Errors\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n};\n"]},"metadata":{},"sourceType":"module"}